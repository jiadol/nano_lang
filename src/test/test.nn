# Test suite for MicroPy

def testEq(name, expected, got) {
    if (expected == got) {
        print("Test", name, "OK:", expected)
    } else {
        print("Test", name, "FAIL: expected=", expected, ", got=", got)
    }
}

# Arithmetic & comparisons
x = 4
y = 2
testEq("x+y", 6, x+y)
testEq("x-y", 2, x-y)
testEq("x*y", 8, x*y)
testEq("x/y", 2, x/y)
testEq("x>y", true, x>y)
testEq("x<y", false, x<y)
testEq("tern", "big", (x>1) ? "big" : "small")

# Boolean logic
a = (x>0) && (y>0)
b = (x<2) || (y<2)
testEq("logicA", true, a)
testEq("logicB", false, b)

# Arrays
nums = [10,20,30]
testEq("nums0", 10, nums[0])
nums[2] = 99
testEq("nums2", 99, nums[2])
cated = nums + [40]
testEq("catedLen", 4, len(cated))
sumA = 0
for (n in cated) {
    sumA = sumA + n
}
testEq("sumA", 10+20+99+40, sumA)

# Ranges
asc = [1::4]
desc = [4::1]
step = [1::6::2]
testEq("ascLen", 4, len(asc))
testEq("desc0", 4, desc[0])
testEq("stepLast", 5, step[2])  # 1->3->5

# Dictionaries
person = {"name":"Alice", "age":30}
testEq("dictName", "Alice", person["name"])
person["age"] = person["age"] + 1
testEq("dictAge", 31, person["age"])

# While loop
count = 3
txt = ""
while (count > 0) {
    txt = txt + count
    count = count - 1
}
testEq("whileTxt", "321", txt)

# If/else
num = 5
res = ""
if (num == 5) {
    res = "ok"
} else {
    res = "bad"
}
testEq("ifElse", "ok", res)

# Functions
def add(a,b) {
    return a + b
}
testEq("addFunc", 9, add(4,5))

def fact(n) {
    if (n <= 1) {
        return 1
    }
    return n * fact(n - 1)
}
testEq("fact5", 120, fact(5))

# Lambdas
inc = x -> x+1
testEq("inc5", 6, inc(5))
mul2 = (a,b)->(a+1)*(b+1)
testEq("mul2", 6, mul2(1,2))

# Classes (prototypes) & inheritance
classParent: = {
    pField = 100
    def showP() {
        return "Hello from parent"
    }
}

classChild:classParent = {
    cField = 200
    def showC() {
        return "Hi from child"
    }
}

testEq("child.cField", 200, classChild.cField)
testEq("child.pField", 100, classChild.pField)
testEq("child.showC", "Hi from child", classChild.showC())
testEq("child.showP", "Hello from parent", classChild.showP())

# inspect built-in
print("Inspect classChild:")
inspect(classChild)

# End of file
